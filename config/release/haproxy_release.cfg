global
    log stdout format raw daemon info
    # create a secure frontend/backend to this socket
    stats socket /run/admin.sock mode 660 level admin expose-fd listeners
    stats socket ipv4@127.0.0.1:2945 mode 660 level admin expose-fd listeners
    stats timeout 30s
    user root
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #    https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #    https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    tune.ssl.default-dh-param 2048
    maxconn 5000
    tune.ssl.cachesize 1000000 # 200MB as each entry requires ~200 bytes

    lua-load /usr/local/etc/haproxy/cors.lua

defaults
    log        global
    backlog    10000
    option     contstats
    option     dontlognull
    option     redispatch
    retries    3
    timeout    tunnel               3600s
    timeout    queue                30s
    timeout    client               25s
    timeout    connect              5s
    timeout    server               25s
    timeout    http-keep-alive      1s
    timeout    http-request         15s
    timeout    tarpit               60s
    maxconn    2000
    default-server maxconn 2000 inter 3s rise 2 fall 10 init-addr 127.0.0.1

userlist AuthUsers
    user admin password $5$6xgk18zg4.CNQVh1$KOeBPBv38GUktc2s4FdYEpApkvrMSn6oi.dHkhUUWg9

#
# Admin socket interface
# exposed on port 2000
#
frontend admin_socket
    bind :2000
    mode tcp
    use_backend admin_socket_backend

backend admin_socket_backend
    mode tcp
    server admin_socket_server 127.0.0.1:2945

#
# HTTPS Backend
#
frontend ha-frontend-http
    bind :443 ssl crt /etc/ssl/private/proxy.pem ca-file /etc/ssl/private/ca.pem verify required
    bind :80
    mode http
    option httplog
    option http-server-close

    # Invoke the CORS service on the request to capture the Origin header
    # https://www.haproxy.com/blog/enabling-cors-in-haproxy/

    # Log the Origin header
    http-request capture req.hdr(Origin) len 256
    http-request lua.cors "*" "*" "*"

    redirect scheme https code 301 if !{ ssl_fc }

    # Monitoring authenticated ACL
    acl PATH_monitoring path_beg -i /monitoring
    acl is_authusers_acl http_auth(AuthUsers)
    http-request auth realm ha-backend-monitoring if PATH_monitoring !is_authusers_acl
    use_backend ha-backend-monitoring if { path -i -m beg /monitoring }

    # Ros Tools rewriting ACL
    acl url_ros-tools path_beg -i /ros-tools
    acl url_ros-tools_websockify path_beg -i /websockify
    use_backend ha-backend-ros-tools if url_ros-tools or url_ros-tools_websockify

    # Remove CORS response headers
    http-response del-header access-control-expose-headers
    http-response del-header access-control-allow-origin
    http-response del-header access-control-allow-credentials
    http-response del-header X-Powered-By

    # Invoke the CORS service on the response to add CORS headers
    http-response lua.cors

    # HSTS (63072000 seconds)
    http-response set-header Strict-Transport-Security max-age=63072000
    http-response add-header X-Frame-Options SAMEORIGIN

    # Add a response header
    http-response add-header X-XSS-Protection "1; mode=block"

    # Health-node non-authenticated ACL
    use_backend ha-backend-health-node if { path -i -m beg /health }

    # Default
    use_backend ha-backend-http

    errorfile 503 /etc/503-movai.http

#
# Ros Tools
#
frontend ha-frontend-ros-tools
    bind :8901 ssl crt /etc/ssl/private/proxy.pem ca-file /etc/ssl/private/ca.pem verify required
    mode http

    # Invoke the CORS service on the request to capture the Origin header
    http-request lua.cors "*" "*" "*"

    use_backend ha-backend-ros-tools
    errorfile 503 /etc/503-movai.http

    # Remove CORS response headers
    http-response del-header access-control-expose-headers
    http-response del-header access-control-allow-origin
    http-response del-header access-control-allow-credentials
    http-response del-header X-Powered-By

    # Invoke the CORS service on the response to add CORS headers
    http-response lua.cors

    # HSTS (63072000 seconds)
    http-response set-header Strict-Transport-Security max-age=63072000
    http-response add-header X-Frame-Options SAMEORIGIN
    http-response add-header X-Content-Type-Options nosniff

    # Add a response header
    http-response add-header X-XSS-Protection "1; mode=block"

#
# Redis Master
#
frontend ha-frontend-redis-master
    bind :6379 ssl crt /etc/ssl/private/proxy.pem
    mode tcp
    use_backend ha-backend-redis-master

#
# Redis Slave
#
frontend ha-frontend-redis-slave
    bind :6379
    mode tcp
    use_backend ha-backend-redis-slave

#
# ROS Master
#
frontend ha-frontend-ros-master
    bind :11311
    mode http
    use_backend ha-backend-ros-master
    errorfile 503 /etc/503-movai.http

#
# Spawner
#
frontend ha-frontend-spawner
    mode tcp
    {FMT_PORTS}
    use_backend ha-backend-spawner

## BACKENDS ##
backend ha-backend-monitoring
    mode http
    default-server maxconn 200
    server container-monitoring 127.0.0.1 disabled

backend ha-backend-http
    mode http
    default-server maxconn 2000
    server container-backend 127.0.0.1 disabled

backend ha-backend-redis-master
    mode tcp
    default-server maxconn 2000
    server container-redis-master 127.0.0.1 disabled

backend ha-backend-redis-slave
    mode tcp
    default-server maxconn 2000
    server container-remote-redis-master 127.0.0.1 disabled ssl verify none

backend ha-backend-spawner
    mode tcp
    default-server maxconn 2000
    server container-spawner 127.0.0.1 disabled

backend ha-backend-ros-tools
    mode http
    default-server maxconn 20
    server container-ros-tools 127.0.0.1:6901 disabled
    http-request replace-path ^/ros-tools/(.*) /\1

backend ha-backend-ros-master
    mode http
    default-server maxconn 2000
    server container-ros-master 127.0.0.1 disabled

backend ha-backend-health-node
    mode http
    default-server maxconn 2000
    http-request set-path "%[path,regsub(^/health/?,/)]"
    server container-health-node 127.0.0.1 disabled

