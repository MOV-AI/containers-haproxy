global
    log /proc/1/fd/1    local0
    log /proc/1/fd/2    local1 notice
    # create a secure frontend/backend to this socket
    stats socket /run/admin.sock mode 660 level admin expose-fd listeners
    stats socket ipv4@127.0.0.1:2945 mode 660 level admin expose-fd listeners
    stats timeout 30s
    user root
    group haproxy

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #    https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #    https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

    tune.ssl.default-dh-param 2048
    maxconn 256
    lua-load /usr/local/etc/haproxy/cors.lua

defaults

    log    global
    backlog 10000
    option    contstats
    option    dontlognull
    option    redispatch
    retries    3
    timeout    tunnel            3600s
    timeout    queue            30s
    timeout    client            25s
    timeout    connect            5s
    timeout    server            25s
    timeout    http-keep-alive    1s
    timeout    http-request    15s
    timeout    tarpit            60s
    default-server inter 3s rise 2 fall 10 init-addr 127.0.0.1

#
# Admin socket interface
# exposed on port 2000
#

frontend admin_socket
    bind :2000
    use_backend admin_socket_backend

backend admin_socket_backend
    mode tcp
    server admin_socket_server 127.0.0.1:2945

#
# Backend
#
frontend ha-frontend-http
    mode    http
    option  httplog
    option  http-server-close
    bind    :443 ssl crt /etc/ssl/private/proxy.pem
    bind    :80
    redirect scheme https code 301 if !{ ssl_fc }

    # Invoke the CORS service on the request to capture the Origin header
    http-request lua.cors "*" "*" "*"

    # Invoke the CORS service on the response to add CORS headers
    http-response lua.cors

    # HSTS (63072000 seconds)
    http-response set-header Strict-Transport-Security max-age=63072000

    errorfile 503 /etc/503-movai.http

    use_backend ha-backend-monitoring if { path -i -m beg /monitoring }
    use_backend ha-backend-health-node if { path -i -m beg /health }
    use_backend ha-backend-http

#
# Redis Master
#
frontend ha-frontend-redis-master
    mode tcp
    # master
    # eth0, outer interface
    bind :6379 ssl crt /etc/ssl/private/proxy.pem
    use_backend ha-backend-redis-master

#
# Redis Slave
#
frontend ha-frontend-redis-slave
    mode tcp
    # slave, eth1, inner network
    bind :6379
    use_backend ha-backend-redis-slave

#
# Spawner
#
frontend ha-frontend-spawner
    mode tcp
    {FMT_PORTS}
    use_backend ha-backend-spawner

## BACKENDS ##

backend ha-backend-monitoring
    mode http
    server container-monitoring 127.0.0.1 disabled

backend ha-backend-http
    mode http
    server container-backend 127.0.0.1 disabled
    http-response add-header X-Frame-Options SAMEORIGIN

backend ha-backend-redis-master
    mode tcp
    # master/ssl
    server container-redis-master 127.0.0.1 disabled

backend ha-backend-redis-slave
    mode tcp
    # slave:
    server container-remote-redis-master 127.0.0.1 disabled ssl verify none

backend ha-backend-spawner
    mode tcp
    server container-spawner 127.0.0.1 disabled

backend ha-backend-health-node
    mode http
    http-request set-path "%[path,regsub(^/health/?,/)]"
    server container-health-node 127.0.0.1 disabled
